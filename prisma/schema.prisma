datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(cuid())
  username         String             @unique
  password         String
  full_name        String
  role             String             @default("USER")
  active           Boolean            @default(true)
  Unavailability   Unavailability[]
  InternalWork     InternalWork[]
  WorkScheduleTask WorkScheduleTask[]
  TimeReport       TimeReport[]
}

model Unavailability {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model InternalWork {
  id           String              @id @default(uuid())
  date         DateTime
  duration     Float
  description  String
  status       InternalWorkStatus?
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  TimeReport   TimeReport?         @relation(fields: [timeReportId], references: [id])
  timeReportId String?
}

model InternalWorkStatus {
  id             String       @id @default(uuid())
  validated      Boolean
  InternalWork   InternalWork @relation(fields: [internalWorkId], references: [id])
  internalWorkId String       @unique
}

model WorkSchedule {
  id               String             @id @default(uuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  hidden           Boolean            @default(false)
  WorkScheduleTask WorkScheduleTask[]
}

model WorkScheduleTask {
  id             String       @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  users          User[]
  schedule       WorkSchedule @relation(fields: [workScheduleId], references: [id])
  workScheduleId String
  TimeReports    TimeReport[]
}

model TimeReportExtra {
  id           String      @id @default(uuid())
  duration     Float
  description  String
  TimeReport   TimeReport? @relation(fields: [timeReportId], references: [id])
  timeReportId String?
}

model TimeReport {
  id                String             @id @default(uuid())
  startDate         DateTime
  endDate           DateTime
  workScheduleTasks WorkScheduleTask[]
  internalWorks     InternalWork[]
  extraItems        TimeReportExtra[]
  validated         Boolean
  nbHoursValidated  Float              @default(0)
  user              User               @relation(fields: [userId], references: [id])
  userId            String
}
